1.
class ConstructorExample {
    int a;
    int b;

    ConstructorExample() {
        a = 10;
        b = 15;
    }

    ConstructorExample(int a, int b) {
        this.a = a;
        this.b = b;
    }

    void disp() {
        System.out.println("a: " + a + ", b: " + b);
    }

    public static void main(String[] args) {
        ConstructorExample obj1 = new ConstructorExample();
        obj1.disp();

        ConstructorExample obj2 = new ConstructorExample(20, 25);
        obj2.disp();
    }
}




2.
class Parent {
    void even() {
        for (int i = 1; i <= 20; i++) {
            if (i % 2 == 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    void odd() {
        for (int i = 1; i <= 20; i++) {
            if (i % 2 != 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    void prime() {
        for (int i = 1; i <= 20; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}

class Child extends Parent {
    @Override
    void even() {
        for (int i = 1; i <= 30; i++) {
            if (i % 2 == 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    @Override
    void odd() {
        for (int i = 1; i <= 30; i++) {
            if (i % 2 != 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    @Override
    void prime() {
        for (int i = 1; i <= 30; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        Child child = new Child();
        child.even();
        child.odd();
        child.prime();
    }
}




3.
class Base {
    void area(int a, int b) {
        System.out.println("Area of a square: " + (a * a));
    }
}

class Derived extends Base {
    @Override
    void area(int a, int b) {
        System.out.println("Area of a rectangle: " + (a * b));
    }
}

public class Main {
    public static void main(String[] args) {
        Derived derived = new Derived();
        derived.area(4, 5);
    }
}




4.
A.Overloading by increasing and decreasing the number of parameters:
public class Calculator {
    public int sum(int a, int b) {
        return a + b;
    }

    public int sum(int a, int b, int c) {
        return a + b + c;
    }
}

B.Overloading by changing the data types of parameters:
public class Calculator {
    public int sum(int a, int b) {
        return a + b;
    }

    public double sum(double a, double b) {
        return a + b;
    }
}

C.Overloading by interchanging the parameters:
public class Calculator {
    public int sum(int a, int b) {
        return a + b;
    }

    public int sum(int b, int a) {
        return a + b;
    }
}



5.
interface Tree {
    void fruits(String param1, String param2);
    void leaves(String param1, String param2, String param3);
    void flowers(String param1, String param2, String param3, String param4);
}

class Branch1 implements Tree {
    @Override
    public void fruits(String param1, String param2) {
        System.out.println("Branch1 fruits: " + param1 + ", " + param2);
    }

    public void leaves(String param1, String param2, String param3) {
        System.out.println("Branch1 leaves: " + param1 + ", " + param2 + ", " + param3);
    }
    public void flowers(String param1, String param2, String param3, String param4) {
        System.out.println("Branch1 flowers: " + param1 + ", " + param2 + ", " + param3 + ", " + param4);
    }
}

class Branch2 implements Tree {

    public void fruits(String param1, String param2) {
        System.out.println("Branch2 fruits: " + param1 + ", " + param2);
    }
    public void leaves(String param1, String param2, String param3) {
        System.out.println("Branch2 leaves: " + param1 + ", " + param2 + ", " + param3);
    }
    public void flowers(String param1, String param2, String param3, String param4) {
        System.out.println("Branch2 flowers: " + param1 + ", " + param2 + ", " + param3 + ", " + param4);
    }
}

public class TreeInterfaceExample {
    public static void main(String[] args) {
        Branch1 branch1 = new Branch1();
        Branch2 branch2 = new Branch2();

        branch1.fruits("Apple", "Orange");
        branch1.leaves("Green", "Yellow", "Red");
        branch1.flowers("Rose", "Tulip", "Lily", "Daisy");

        System.out.println();
        branch2.fruits("Mango", "Banana");
        branch2.leaves("Dark green", "Light green", "Brown");
        branch2.flowers("Sunflower", "Daffodil", "Orchid", "Jasmine");
    }
}
