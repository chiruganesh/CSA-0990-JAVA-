8.MATRIX OF ADDITION
public class MatrixAddition {
    public static void main(String[] args) {
        int[][] mat1 = {{1, 2}, {5, 3}};
        int[][] mat2 = {{2, 3}, {4, 1}};
        int rows = mat1.length;
        int cols = mat1[0].length;
        
        int[][] result = new int[rows][cols];
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i][j] = mat1[i][j] + mat2[i][j];
            }
        }
        
        System.out.println("Matrix Addition Result:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                System.out.print(result[i][j] + " ");
            }
            System.out.println();
        }
    }
}

9.MATRIX OF MULTIPLICATION
public class MatrixMultiplication {
    public static void main(String[] args) {
        int[][] mat1 = {{1, 2}, {5, 3}};
        int[][] mat2 = {{2, 3}, {4, 1}};
        int[][] result = new int[2][2];

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 2; k++) {
                    result[i][j] += mat1[i][k] * mat2[k][j];
                }
            }
        }

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                System.out.print(result[i][j] + " ");
            }
            System.out.println();
        }
    }
}

10.MERGE TWO SORT ARRAY
import java.util.ArrayList;
import java.util.Collections;

public class MergeSortedArrays {
    public static void main(String[] args) {
        int[] arr1 = {1, 3, 4, 5};
        int[] arr2 = {2, 4, 6, 8};

        ArrayList<Integer> mergedList = new ArrayList<>();

        for (int num : arr1) {
            mergedList.add(num);
        }

        for (int num : arr2) {
            mergedList.add(num);
        }

        Collections.sort(mergedList);

        System.out.println("Merged and Sorted Array: " + mergedList);
    }
}

11.MEAN MEDIAM MODE
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class StatisticsCalculator {

    public static void main(String[] args) {
        int[] numbers = {16, 18, 27, 16, 23, 21, 19};

        double mean = calculateMean(numbers);
        double median = calculateMedian(numbers);
        int mode = calculateMode(numbers);

        System.out.println("Mean: " + mean);
        System.out.println("Median: " + median);
        System.out.println("Mode: " + mode);
    }

    public static double calculateMean(int[] numbers) {
        int sum = 0;
        for (int num : numbers) {
            sum += num;
        }
        return (double) sum / numbers.length;
    }

    public static double calculateMedian(int[] numbers) {
        Arrays.sort(numbers);
        if (numbers.length % 2 == 0) {
            return (double) (numbers[numbers.length / 2 - 1] + numbers[numbers.length / 2]) / 2;
        } else {
            return (double) numbers[numbers.length / 2];
        }
    }

    public static int calculateMode(int[] numbers) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : numbers) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        int mode = 0;
        int maxFrequency = 0;
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            if (entry.getValue() > maxFrequency) {
                mode = entry.getKey();
                maxFrequency = entry.getValue();
            }
        }

        return mode;
    }
}

13.VALIDITY CHECKER
public class ValidityChecker {
    public static void main(String[] args) {
        String input = "Your input string here";
        
        if (isValid(input)) {
            System.out.println("Input is valid.");
        } else {
            System.out.println("Input is not valid.");
        }
    }
    
    public static boolean isValid(String input) {

        return true; // Change this to your validation result
    }
}


14.
